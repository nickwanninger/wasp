
CC = gcc
CXX = g++
AS = nasm



FILES := $(shell find kernel/src -type f)


CSOURCES:=$(filter %.c,$(FILES))
COBJECTS:=$(CSOURCES:%.c=%.o)


ASOURCES:=$(filter %.asm,$(FILES))
AOBJECTS:=$(ASOURCES:%.asm=%.o)

KERNEL=build/kernel.elf


MODE := 32

AFLAGS=-w-zext-reloc

CINCLUDES=-Ikernel/include/



COMMON_FLAGS := $(CINCLUDES) -fno-omit-frame-pointer \
				 -Wno-sign-compare\
			   -ffreestanding \
			   -fno-stack-protector \
			   -fno-strict-aliasing \
         -fno-strict-overflow \
			   -mno-red-zone \
			   -O3 -fno-tree-vectorize

CFLAGS:= $(COMMON_FLAGS) -Wall -fno-common -Wstrict-overflow=5

DFLAGS=-g -DDEBUG -O0



# ifeq ($(MODE),32)
AFLAGS+=-f elf32
CFLAGS+=-m32
LDFLAGS+=-m elf_i386
# else
# AFLAGS+=-f elf64
# CFLAGS+=-m64
# endif

kern: build $(KERNEL)

build:
	@mkdir -p build

default:
	@echo $(COBJECTS) $(AOBJECTS)


%.o: %.c
	@echo " CC " $<
	@$(CC) $(CFLAGS) -o $@ -c $<



clean:
	@rm -f $(AOBJECTS) $(COBJECTS)

%.o: %.asm
	@echo " AS " $<
	$(AS) $(AFLAGS) -o $@ $<

$(KERNEL): $(CODEFILES) $(ASOURCES) $(CSOURCES) $(COBJECTS) $(AOBJECTS)
	@echo " LD " $@
	@$(LD) $(LDFLAGS) $(AOBJECTS) $(COBJECTS) -T kernel/kernel.ld -o $@
